syntax = "proto3";

option go_package = "internal/genprotos";
import "google/protobuf/empty.proto";

package game;


service GameService {
    rpc MakeMove(MakeMoveRequest) returns (MakeMoveResponse);
    rpc CreateGame(CreateGameRequest) returns (google.protobuf.Empty); // now I think we do not return anything to the user directly, the user gets their opponent via published message in redis
    rpc GetGameStats(GetGameStatsRequest) returns (GetGameStatsResponse);
}

message Move {
    string move_from = 1;
    string move_to = 2;
    bool is_white = 3;
} // we make if it's requester's turn and the requester's side

message CreateGameRequest {
    string player_id = 1;
    int32 player_rank = 2;
    int32 duration = 3;
} // create a game according to player's rank among [player_rank - 200, player_rank + 200] players

message MakeMoveRequest {
    string game_id = 1;
    string player_id = 2;
    Move move = 3;
}

message MakeMoveResponse {
    bool success = 1;
    string message = 2;
    bool is_check = 3; // this is needed in frontend, if the move is a check, then move sound will be different than a basic move
    bool is_checkmate = 4; // determine if after this move the game is finished with checkmate
} // response contains a message if it is not a successfull move

message GetGameStatsRequest {
    string game_id = 1;
} // get game statistics by game_id

message GetGameStatsResponse {
    repeated Move moves = 1;
} // get an array moves made in the game

enum PieceType {
    PAWN = 0;
    ROOK = 1;
    KNIGHT = 2;
    BISHOP = 3;
    QUEEN = 4;
    KING = 5;
} // pieces in chess

message Piece {
    PieceType type = 1;
    string position = 2;
    bool is_white = 3;
    bool captured = 4;
}

message Game {
    string game_id = 1;
    repeated string players = 2; // there will only be two id's of players, the one at index 0 is white
    repeated Move moves = 3;
}
